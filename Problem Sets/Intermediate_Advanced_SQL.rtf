{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red19\green19\blue28;}
{\*\expandedcolortbl;;\cssrgb\c9804\c9804\c14510;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /*Write a query to count the number of non-null rows in the low column.*/\
SELECT COUNT(low)\
FROM tutorial.aapl_historical_stock_price\
\
/*Write a query that determines counts of every single column. Which column has the most null values?*/\
\
SELECT * \
FROM tutorial.aapl_historical_stock_price\
\
/*Write a query that determines counts of every single column. Which column has the most null values?*/\
\
SELECT COUNT ('date') AS "count_of_dates", \
COUNT (year) AS "count_of_years", \
COUNT (month) AS "count_of_month",\
COUNT (open) AS "open",\
COUNT (high) AS "high",\
COUNT (low) AS "low",\
COUNT (volume) AS "volume",\
COUNT (id) AS "id"\
FROM tutorial.aapl_historical_stock_price\
/*You are counting the number of entries in each column and changing the names of all columns*/\
\
/*Write a query to calculate the average opening price*/\
\
SELECT SUM (open) / COUNT (open)\
FROM tutorial.aapl_historical_stock_price\
/*you need to first find the sum of all values at opening price and then divide by how many entries there are*/\
\
/*What was Apple's lowest stock price (at the time of this data collection)?*/\
\
SELECT MIN (low) AS "min_low"\
FROM tutorial.aapl_historical_stock_price\
\
/*What was the highest single-day increase in Apple's share value?*/\
SELECT MAX (close - open) AS "Max_Difference_in_value"\
FROM tutorial.aapl_historical_stock_price\
/*First you need to find the difference by subtracting the starting value from the ending value and then find the max of that difference*/\
\
/*Write a query that calculates the average daily trade volume for Apple stock.*/\
SELECT AVG(volume)\
FROM tutorial.aapl_historical_stock_price\
/*Simple average problem--this is ignoring nulls, so they do not get calculated as entries, they are just ignored*/\
\
/*Calculate the total number of shares traded each month. Order your results chronologically.*/\
\
SELECT month,\
COUNT (*) AS "count"\
FROM tutorial.aapl_historical_stock_price\
GROUP BY month  \
ORDER BY month\
/*added in the extra line to make the list chronological ascending*/\
\
/*Write a query to calculate the average daily price change in Apple stock, grouped by year.*/\
SELECT year,\
AVG(close - open) AS "daily price change"\
FROM tutorial.aapl_historical_stock_price\
GROUP BY year\
ORDER BY year\
/*First you need to select the column you want to do your aggregations in,then do your aggregation and then group.I wanted year to be chronological so I added the orderby*/\
\
/*Write a query that calculates the lowest and highest prices that Apple stock achieved each month.*/\
SELECT month,\
MIN(low) AS "Min_month",\
MAX(high) AS "Max_month"\
FROM tutorial.aapl_historical_stock_price\
GROUP BY month\
ORDER BY month\
/*first, we wanted to group these into months, and we had to take the lowest of lowest and the highest of highs, then order chronologically*/\
\
/*Write a query that includes a column that is flagged "yes" when a player is from California, and sort the results with those players first.*/\
SELECT * \
FROM benn.college_football_players\
\
SELECT player_name, \
      state,\
      CASE WHEN state = 'CA' THEN 'yes'\
      ELSE 'no' END AS from_CA\
FROM benn.college_football_players\
ORDER BY from_CA DESC, player_name\
/*I wanted to know where a student was from so I searched in the state column for CA and created my column, then sorted by CA first and then wanted to do alphabetical order within from_ca, so I added the order by player_name as well.*/\
\
/*Write a query that includes players' names and a column that classifies them into four categories based on height.*/\
\
SELECT MAX(height) AS max_height, MIN(height) AS min_height\
FROM benn.college_football_players\
\
SELECT player_name,\
      height,\
      CASE WHEN height >= 80 THEN 'over_6ft_8'\
          WHEN height < 80 and height >= 70 THEN '5ft_10 - 6ft_7'\
          WHEN height < 70 and height >= 60 THEN '5ft - 5ft_9'\
          WHEN height = 0 THEN 'NA'\
          WHEN height < 60 THEN 'under_5ft'\
          END AS height_class\
      FROM benn.college_football_players\
      ORDER BY height\
/* I added in the extra height = 0 because that was the minimum value returned for height. Obviously there isn't a player with a height of 0, so the information must be missing. I had to put the 0 = NA statement before the <60 statement because I wanted it to search for 0s and assign those as NA before searching <60 values.*/\
\
/*Write a query that selects all columns from benn.college_football_players \
and adds an additional column that displays the player's name if that player is a junior or senior.*/\
\
SELECT * ,\
      CASE WHEN year = 'JR' THEN "player_name"\
      WHEN year = 'SR' THEN "player_name"\
      END AS upperclass_student\
FROM benn.college_football_players\
\
/*Because JR is a categorical value, I need to put it in single '', and because player_name is a column value, I need to use double "".*/\
\
/*Write a query that counts the number of 300lb+ players for each of the following regions: \
West Coast (CA, OR, WA), Texas, and Other (Everywhere else).*/\
\
SELECT CASE WHEN state = 'CA' or state = 'OR' or state = 'WA' THEN 'west_coast'\
            WHEN state = 'TX' THEN 'texas'\
            ELSE 'Other' END AS regions,\
            COUNT(1) AS count_players\
      FROM benn.college_football_players\
      WHERE weight > 300 \
      GROUP BY (1)\
/*wanted to count how many players there are in each region, then out of those players,how many weight more than 300 lbs. \
Is there a way to do this where you add another column when you do this to have total players and players 300+ next to each other?*/\
\
/*Write a query that calculates the combined weight of all underclass players (FR/SO) \
in California as well as the combined weight of all upperclass players (JR/SR) in California.*/\
\
SELECT CASE WHEN year = 'FR' or year = 'SO' THEN 'underclass_players'\
            WHEN year = 'JR' or year = 'SR' THEN 'upperclass_players'\
            END AS year_groups,\
            SUM(weight) AS sum_weight\
            FROM benn.college_football_players\
            WHERE state = 'CA'\
            GROUP BY (1)\
/*First grouped by year class and then added the weights together in those classes. I wanted it grouped by class year*/\
\
/*Write a query that displays the number of players in each state, \
with FR, SO, JR, and SR players in separate columns and another column for the total number of players. \
Order results such that states with the most players come first.*/\
\
SELECT state,\
      COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_players, \
      COUNT (CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_players, \
      COUNT (CASE WHEN Year = 'JR' THEN 1 ELSE NULL END) AS jr_players, \
      COUNT (CASE WHEN Year = 'SR' THEN 1 ELSE NULL END) AS sr_players, \
      COUNT(year) AS total_players\
      FROM benn.college_football_players\
      GROUP BY state\
      ORDER BY (total_players) DESC\
/* Have to select state because we want to have the state that the players are from listed. Then we are counting all the players in each year and sorting*?\
\
/*Write a query that shows the number of players at schools with names that start with A through M, \
and the number at schools with names starting with N - Z.*/\
\
SELECT * \
FROM benn.college_football_players\
\
SELECT COUNT(CASE WHEN school_name >='N' THEN 1 ELSE NULL END) AS nz_Schools,\
       COUNT (CASE WHEN school_name <='M' THEN 1 ELSE NULL END) AS am_Schools\
       FROM benn.college_football_players\
       \
/*Pretty simple query below is vertical, non-pivot table*/\
\
SELECT CASE WHEN school_name < 'n' THEN 'A-M'\
            WHEN school_name >= 'n' THEN 'N-Z'\
            ELSE NULL END AS school_name_group,\
       COUNT(1) AS players\
  FROM benn.college_football_players\
 GROUP BY 1\
\
/*Write a query that returns the unique values in the year column, in chronological order.*/\
 \
 SELECT DISTINCT year \
 FROM tutorial.aapl_historical_stock_price\
 ORDER BY year\
 /* have to make sure you use the Order By clause to make it chronological*/\
 \
 /*Write a query that counts the number of unique values in the month column for each year.*/\
 SELECT year,\
        COUNT(DISTINCT month) AS unique_months\
        FROM tutorial.aapl_historical_stock_price\
        GROUP BY year\
        ORDER BY year\
        \
/*Write a query that separately counts the number of unique values in the month column \
and the number of unique values in the `year` column.*/\
\
SELECT COUNT(DISTINCT month) AS unique_months,\
      COUNT (DISTINCT year) AS unique_years\
      FROM tutorial.aapl_historical_stock_price\
      \
/*Write a query that selects the school name, player name, position, and weight for every player in Georgia, \
ordered by weight (heaviest to lightest). \
Be sure to make an alias for the table, and to reference all column names in relation to the alias.*/\
\
SELECT players.school_name as school_name,\
      players.player_name as player_name,\
      players.position as position,\
      players.weight as weight,\
FROM benn.college_football_players players\
WHERE players.state = 'GA'\
ORDER BY weight DESC\
/*aliased benn.college_football_players as players and then selected all the columns where state = GA and ordered by desc weight*/\
\
/*Write a query that displays player names, school names and conferences for schools in the "FBS (Division I-A Teams)" division.*/\
SELECT players.player_name AS player_name,\
      players.school_name AS school_name,\
      teams.conference AS conference\
      FROM benn.college_football_players players\
      JOIN benn.college_football_teams teams\
      ON teams.school_name = players.school_name \
      WHERE teams.division = 'FBS (Division I-A Teams)'\
/*I joined the two tables together and then only displayed the columns of teams within the FBS (Division I-A)*/\
\
\
/*Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table and the tutorial.crunchbase_companies table, \
but instead of listing individual rows, count the number of non-null rows in each table.*/\
\
SELECT COUNT(*) AS row_count\
    FROM tutorial.crunchbase_companies companies\
    JOIN tutorial.crunchbase_acquisitions acquisitions\
    ON companies.permalink = acquisitions.company_permalink\
    \
/*change to left join*/\
\
SELECT COUNT(*) AS row_count\
    FROM tutorial.crunchbase_companies companies\
    LEFT JOIN tutorial.crunchbase_acquisitions acquisitions\
    ON companies.permalink = acquisitions.company_permalink\
/*the left join returns far more results becuse it also includes data that is only found on the left table*/\
\
/*Count the number of unique companies (don't double-count companies) and unique acquired companies by state. \
Do not include results for which there is no state data, \
and order by the number of acquired companies from highest to lowest.*/\
SELECT companies.state_code as state,\
       COUNT(DISTINCT companies.name) as companies_count,\
       COUNT(DISTINCT acquisitions.company_name) as acquired_companies\
       FROM tutorial.crunchbase_companies companies\
       LEFT JOIN tutorial.crunchbase_acquisitions acquisitions\
       ON companies.permalink = acquisitions.company_permalink\
       WHERE companies.state_code IS NOT NULL\
       GROUP BY state \
       ORDER BY acquired_companies DESC\
/*needed to count distinct because we wanted no repeats, had to left join because we wanted to include all columns from the companies database but not from the aquisitions database. We needed to use a WHERE query to make sure the null values for state_code were ignored*/\
\
/*Rewrite the previous practice query in which you counted total and acquired companies by state, but with a RIGHT JOIN instead of a LEFT JOIN. The goal is to produce the exact same results.*/\
SELECT companies.state_code as state,\
       COUNT(DISTINCT companies.name) as companies_count,\
       COUNT(DISTINCT acquisitions.company_name) as acquired_companies\
       FROM tutorial.crunchbase_acquisitions acquisitions\
       RIGHT JOIN tutorial.crunchbase_companies companies\
       ON companies.permalink = acquisitions.company_permalink\
       WHERE companies.state_code IS NOT NULL\
       GROUP BY state \
       ORDER BY acquired_companies DESC\
/*Output is the same by switching the order of the databases in the query*/\
\
/*Write a query that shows a company's name, "status" (found in the Companies table), \
and the number of unique investors in that company. \
Order by the number of investors from most to fewest. Limit to only companies in the state of New York.*/\
SELECT COUNT(DISTINCT investments.investor_name) as number_investors,\
       companies.state_code as state,\
       companies.name as company_name,\
       companies.status as company_status\
       FROM tutorial.crunchbase_companies companies\
       LEFT JOIN tutorial.crunchbase_investments investments\
       ON companies.permalink = investments.company_permalink\
       WHERE companies.state_code = 'NY'\
       GROUP BY 2, 3, 4\
       ORDER BY number_investors DESC\
/*Had to find the correct table to pull investors from, remember that anything not in an aggregate has to be in a Group by clause*/\
\
/*Write a query that lists investors based on the number of companies in which they are invested. \
Include a row for companies with no investor, and order from most companies to least.*/\
\
SELECT CASE WHEN investments.investor_name IS NULL THEN 'no investor'\
            ELSE investments.investor_name END as investor_name,\
       COUNT(DISTINCT companies.permalink) as number_investments\
       --investments.company_name as company_name\
       FROM tutorial.crunchbase_companies companies\
       LEFT JOIN tutorial.crunchbase_investments investments\
       ON companies.permalink = investments.company_permalink\
       GROUP BY 1\
       ORDER BY 2 DESC\
\
/*Write a query that joins tutorial.crunchbase_companies and tutorial.crunchbase_investments_part1 using a FULL JOIN. \
Count up the number of rows that are matched/unmatched as in the example above*/\
SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NULL\
                  THEN companies.permalink ELSE NULL END) AS companies_only,\
       COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NOT NULL\
                  THEN companies.permalink ELSE NULL END) AS both_tables,\
       COUNT(CASE WHEN companies.permalink IS NULL AND investments.company_permalink IS NOT NULL\
                  THEN investments.company_permalink ELSE NULL END) AS investments_only \
FROM tutorial.crunchbase_companies companies\
FULL JOIN tutorial.crunchbase_investments_part1 investments\
ON investments.company_permalink = companies.permalink\
/*this shows how many results you would have from the full join of all unmatched information*/\
\
/*Write a query that appends the two crunchbase_investments datasets above (including duplicate values). \
Filter the first dataset to only companies with names that start with the letter "T", \
and filter the second to companies with names starting with "M" (both not case-sensitive). \
Only include the company_permalink, company_name, and investor_name columns.*/\
SELECT company_permalink as permalink,\
       company_name as company_name,\
       investor_name as investor_name\
FROM tutorial.crunchbase_investments_part1\
WHERE company_name >= 'T' AND company_name < 'U'\
\
UNION ALL\
\
SELECT company_permalink as permalink,\
       company_name as company_name,\
       investor_name as investor_name\
FROM tutorial.crunchbase_investments_part2\
WHERE company_name >= 'M' AND company_name <'N'\
\
/*use the 3 columns in each select query since you can only append data with the same # columns, find the company names that are in the range desired*/\
\
\
/*Write a query that shows 3 columns. The first indicates which dataset (part 1 or 2) the data comes from, \
the second shows company status, and the third is a count of the number of investors.\
\
Hint: you will have to use the tutorial.crunchbase_companies table as well as the investments tables. \
And you'll want to group by status and dataset.*/\
\
SELECT 'investments_part1' as dataset_name,\
      companies.status as company_status,\
      companies.name as company_name,\
      COUNT(DISTINCT investments_part1.investor_permalink) as number_of_investors\
      FROM tutorial.crunchbase_companies companies\
      LEFT JOIN tutorial.crunchbase_investments_part1 investments_part1\
      ON companies.permalink = investments_part1.company_permalink\
      GROUP BY 1, 2, 3\
      \
UNION ALL\
\
SELECT 'investments_part2' as dataset_name,\
      companies.status as company_status,\
      companies.name as company_name,\
      COUNT(DISTINCT investments_part2.investor_permalink) as number_of_investors\
      FROM tutorial.crunchbase_companies companies\
      LEFT JOIN tutorial.crunchbase_investments_part2 investments_part2\
      ON companies.permalink = investments_part2.company_permalink\
      GROUP BY 1, 2, 3\
/*needed to put the investments name in '' quotes. We are looking at where the data came from, the status, and how many investors there were.*/\
}